from InstanceBot import bot, yoomoney_client
from aiogram import types, Dispatcher
from keyboards import Keyboards
from aiogram.dispatcher import FSMContext
from database import db
from yoomoney import Quickpay
import random
import Config
from states import User


async def start(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    username = msg.from_user.username
    start_message = msg.text[7:]

    if not db.user_exists(user_id):

        if len(start_message) > 0 and not start_message.startswith("c"):
            if start_message.isdigit() and start_message != str(user_id):

                db.add_user(user_id, ref_id=start_message)

                await bot.send_message(
                    chat_id=start_message,
                    text=f'–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª @{username}!'
                )
        else:
            if start_message.startswith("c"):
                if start_message != str(user_id):
                    referrer_id = start_message.split("_")[2]

                    db.add_user(user_id, ref_id=referrer_id)

                    await bot.send_message(
                        chat_id=referrer_id,
                        text=f'–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª @{username}!'
                    )

            else:
                db.add_user(user_id)

        await bot.send_message(
            chat_id=Config.admin_id[0],
            text='–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n'
                 f'ID: {user_id}\n'
                 f'Username: @{msg.from_user.username}'
        )

    if db.get_info_user(user_id)[6] == 1:
        return
    
    if start_message.startswith("c"):
        car_number = start_message.split("_")[1]
        msg.text = car_number
        await add_car_report_button(msg, state)
    else:
        await User.menu.start.set()
        await msg.answer("""–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨üéà
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —á—Ç–æ –ø–∏—à—É—Ç –æ –≤–∞—Å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏!
–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –º–æ–∂–µ—Ç –æ –≤–∞—Å —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª–∏üë®‚Äçüíª 
–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ ¬´–ì–æ—Å–Ω–æ–º–µ—Ä—É¬ª, ¬´–ù–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –∏–ª–∏ ¬´VIN-–∫–æ–¥—É¬ª. 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:""", reply_markup=Keyboards.menu())


async def add_car_report_button(msg: types.Message, state: FSMContext):
    car_number = msg.text
    car_owner_username = db.get_car_owner_username(car_number)
    bot_name = await bot.get_me()
    user_id = msg.from_user.id
    interested_users_amount = db.get_interested_users_amount(car_number)

    await state.update_data(car_number=car_number)

    db.add_interested_user(car_number, user_id)

    await User.menu.start.set()
    if not db.get_car_number_reports(car_number):

        await state.update_data(first_report_bool=True)

        await msg.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            + f"\n–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å {interested_users_amount} —á–µ–ª–æ–≤–µ–∫."
            + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}",
            reply_markup=Keyboards.add_own_car_report(),
        )

    else:
        await state.update_data(first_report_bool=False)
        reports_amount = len(db.get_car_number_reports(car_number))

        await msg.answer(
            (f"–ù–∞–π–¥–µ–Ω–æ {reports_amount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            if not car_owner_username
            else f"–ù–∞–π–¥–µ–Ω–æ {reports_amount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –í–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–π–¥–µ–Ω.")
            + f"\n–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å {interested_users_amount} —á–µ–ª–æ–≤–µ–∫."
            + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}",
            reply_markup=Keyboards.add_or_see_report(car_number),
        )


async def see_car_report_button(msg: types.Message, state: FSMContext):
    car_number = msg.text
    car_owner_username = db.get_car_owner_username(car_number)
    bot_name = await bot.get_me()
    user_id = msg.from_user.id
    interested_users_amount = db.get_interested_users_amount(car_number)

    await state.update_data(car_number=car_number)

    db.add_interested_user(car_number, user_id)

    await User.menu.start.set()
    if not db.get_car_number_reports(car_number):
        await msg.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            + f"\n–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å {interested_users_amount} —á–µ–ª–æ–≤–µ–∫."
            + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}"
        )

    else:
        reports_amount = len(db.get_car_number_reports(car_number))

        await msg.answer(
            (f"–ù–∞–π–¥–µ–Ω–æ {reports_amount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            if not car_owner_username
            else f"–ù–∞–π–¥–µ–Ω–æ {reports_amount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –í–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–π–¥–µ–Ω.")
            + f"\n–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å {interested_users_amount} —á–µ–ª–æ–≤–µ–∫."
            + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}",
            reply_markup=Keyboards.see_report(car_number),
        )


async def replenish_balance(msg: types.Message, state: FSMContext):

    if not msg.text.isdigit():
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        return

    balance_replenish_amount = int(msg.text)
    user_id = msg.from_user.id
    random_label = random.randint(0, 1000)

    await state.update_data(balance_replenish_amount=balance_replenish_amount)
    await state.update_data(random_label=random_label)

    user = yoomoney_client.account_info()

    quickpay = Quickpay(
        receiver=user.account,
        quickpay_form="shop",
        targets="paying for report",
        paymentType="SB",
        sum=balance_replenish_amount,
        label=f"{user_id}__{random_label}",
    )

    await User.menu.start.set()
    await msg.answer(
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {balance_replenish_amount} –º–æ–Ω–µ—Ç, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ - {quickpay.base_url}",
        reply_markup=Keyboards.check_payment(),
    )


async def add_own_car_report(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    user_car_number = data["car_number"]
    user_id = msg.from_user.id

    if msg.photo:
        user_photo = msg.photo[-1].file_id
        user_text = msg.caption

        await bot.send_photo(
            Config.admin_id[0],
            photo=user_photo,
            caption=f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É "{user_car_number}": \n{user_text}',
            reply_markup=Keyboards.approve_or_reject_report(user_id, user_car_number),
        )
    else:
        user_text = msg.text

        await bot.send_message(
            Config.admin_id[0],
            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É "{user_car_number}": \n{user_text}',
            reply_markup=Keyboards.approve_or_reject_report(user_id, user_car_number),
        )

    await User.menu.start.set()
    await msg.answer("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", reply_markup=Keyboards.menu())


async def callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    username = call.from_user.username

    if db.get_info_user(user_id)[6] == 1:
        return

    await bot.answer_callback_query(
        callback_query_id=call.id,
        text='‚úÖ'
    )

    if call.data == "add_car_report_button":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´—Ö111—Ö—Ö777¬ª –∏–ª–∏ ¬´79991112233¬ª")

        await User.UserState.add_car_report_button.set()

    elif call.data == "add_own_car_report":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ 1 —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.")

        await User.UserState.add_own_car_report.set()

    elif call.data.startswith("report_approve"):
        user_id = call.data.split("__")[1]
        car_number = call.data.split("__")[2]
        subscribed_users = db.get_car_subscribe_users(car_number)

        if call.message.photo:
            user_photo = call.message.photo[-1].file_id
            user_text = call.message.caption.split(":")[1][2:]

            for subscribed_user_id in subscribed_users:
                await bot.send_photo(
                    subscribed_user_id,
                    photo=user_photo,
                    caption=f'–ü–æ –Ω–æ–º–µ—Ä—É "{car_number}" –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! \n–°–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_text}',
                )

            await call.message.delete()
            await call.message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä—ë–Ω ‚úÖ")
        else:
            user_text = call.message.text.split(":")[1][2:]
            user_photo = None

            for subscribed_user_id in subscribed_users:
                await bot.send_message(
                    subscribed_user_id,
                    f'–ü–æ –Ω–æ–º–µ—Ä—É "{car_number}" –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! \n–°–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_text}',
                )

            await call.message.edit_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä—ë–Ω ‚úÖ")

        await bot.send_message(
            user_id, f"""–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –Ω–æ–º–µ—Ä—É "{car_number}" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ‚úÖ 
–í–∞—à —Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 5 –º–æ–Ω–µ—Ç!""")
        
        if not db.owner_exists(car_number):
            await bot.send_message(
                user_id,
                f"\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ—ë –∏–º—è –∫ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã (–µ—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü)?",
                reply_markup=Keyboards.become_owner(),
            )

        report_id = random.randint(1, 9999999999)
        car_owner_username = db.get_car_owner_username(car_number)
        db.add_car_report(report_id, car_number, user_text, user_id, user_photo, car_owner_username)
        db.change_balance(user_id, 5)

    elif call.data.startswith("report_reject"):
        user_id = call.data.split("__")[1]
        car_number = call.data.split("__")[2]

        await call.message.edit_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
        await bot.send_message(
            user_id, f'–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –Ω–æ–º–µ—Ä—É "{car_number}" –æ—Ç–∫–ª–æ–Ω–∏–ª–∏! ‚ùå'
        )

    elif call.data.startswith("see_car_report") and call.data != "see_car_report_button":
        car_number = call.data.split("__")[1]
        await call.message.edit_text(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ {db.get_setting()[1]} —Ä—É–±–ª–µ–π –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", reply_markup=Keyboards.paying_for_report(car_number)
        )

    elif call.data.startswith("report_paying"):
        setting = db.get_setting()
        car_number = call.data.split("__")[1]
        car_owner_username = db.get_car_owner_username(car_number)

        if not db.get_balance(user_id) >= setting[1]:
            await bot.answer_callback_query(
                callback_query_id=call.id,
                text='–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!',
                show_alert=True
            )
            return

        db.change_balance(user_id, setting[1])

        await call.message.edit_text("–° —Ç–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚úÖ")
        await call.message.answer(("" if not car_owner_username else f"–í–ª–∞–¥–µ–ª—å—Ü–µ–º –º–∞—à–∏–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{car_owner_username}.") + "\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ")

        data = await state.get_data()
        car_number = data["car_number"]
        car_reports = db.get_car_number_reports(car_number)
        subscribed_users = db.get_car_subscribe_users(car_number)

        for index, report in enumerate(car_reports):
            index += 1

            if report[4]:
                await call.message.answer_photo(
                    photo=report[4], caption=f"{index} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \n{report[3]}"
                )
            else:
                await call.message.answer(f"{index} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \n{report[3]}")

            db.add_report_to_history(user_id, report[1])

        if str(user_id) not in subscribed_users:
            await call.message.answer(
                f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É {car_number}?",
                reply_markup=Keyboards.subscribe_for_reports(),
            )

    elif call.data == "report_subscribe":
        data = await state.get_data()
        car_number = data["car_number"]

        db.subscribe_user_for_car_number(car_number, user_id)
        db.add_subscribe_number(user_id, car_number)

        await call.message.edit_text("–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ")

    elif call.data == "no_report_subscribe":
        await call.message.edit_text("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    elif call.data == "see_car_report_button":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´—Ö111—Ö—Ö777¬ª –∏–ª–∏ ¬´79991112233¬ª")

        await User.UserState.see_car_report_button.set()

    elif call.data == "profile":
        username = call.from_user.username
        user_balance = db.get_balance(user_id)

        await call.message.edit_text(
            f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n–ò–º—è: {username} \nID: {user_id} \n–ë–∞–ª–∞–Ω—Å: {user_balance}",
            reply_markup=Keyboards.balance_button(),
        )

    elif call.data == "replenish_balance":
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        )

        await User.UserState.replenish_balance.set()

    elif call.data == "check_payment":
        data = await state.get_data()

        balance_replenish_amount = data["balance_replenish_amount"]
        random_label = data["random_label"]

        pay_history = yoomoney_client.operation_history(
            label=f"{user_id}__{random_label}"
        )

        if pay_history.operations:
            if pay_history.operations[0].status == "success":

                user = db.get_info_user(user_id)
                setting = db.get_setting()

                if user[5]:
                    amount = int(balance_replenish_amount / 100 * setting[3])
                    db.change_balance(user[5], amount)

                    await bot.send_message(
                        chat_id=user[5],
                        text=f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {amount} (–≤–∞–ª—é—Ç–∞)'
                    )

                db.change_balance(user_id, balance_replenish_amount)
                await call.message.edit_text("–¢–≤–æ–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=Keyboards.menu())

                return

        await bot.answer_callback_query(
            callback_query_id=call.id,
            text='–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'
        )

    elif call.data == "user_subscriptions":
        get_subscribe_car_numbers = db.get_subscribe_car_numbers(user_id)

        await call.message.edit_text(
            f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {', '.join(get_subscribe_car_numbers)}"
        )

    elif call.data == "become_owner":
        await call.message.edit_text(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ {db.get_setting()[2]} —Ä—É–±–ª–µ–π –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º",
            reply_markup=Keyboards.paying_for_become_owner(),
        )

    elif call.data == "no_become_owner":
        await call.message.edit_text("–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚úÖ")

    elif call.data == "becoming_owner_paying":
        data = await state.get_data()
        user_car_number = data["car_number"]

        setting = db.get_setting()

        if not db.get_balance(user_id) >= setting[2]:
            await bot.answer_callback_query(
                callback_query_id=call.id,
                text='–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!',
                show_alert=True
            )
            return

        db.change_balance(user_id, setting[2])

        await call.message.edit_text(
            "–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É!"
        )
        await bot.send_message(
            Config.admin_id[0],
            f"@{username} –ø—Ä–∏—Å–ª–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–æ —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–∞—à–∏–Ω—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {user_car_number}!",
            reply_markup=Keyboards.approve_or_reject_becoming_owner(
                user_id, user_car_number
            ),
        )

    elif call.data.startswith("becoming_owner_approve"):
        user_id = call.data.split("__")[1]
        car_number = call.data.split("__")[2]

        un = await bot.get_chat(user_id)

        db.add_owner_username(car_number, un.username)
        await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")
        await bot.send_message(
            user_id,
            f'–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º "{car_number}" –æ–¥–æ–±—Ä–∏–ª–∏ ‚úÖ \n–¢–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞!',
        )

    elif call.data.startswith("becoming_owner_reject"):
        user_id = call.data.split("__")[1]
        car_number = call.data.split("__")[2]

        await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
        await bot.send_message(
            user_id,
            f'–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º "{car_number}" –æ—Ç–∫–ª–æ–Ω–∏–ª–∏! ‚ùå',
        )

    elif call.data == 'reports':

        await User.history.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–ò—Å—Ç–æ—Ä–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.history(user_id, 0)
        )

    elif call.data == 'refferals':

        bot_name = await bot.get_me()

        await bot.send_message(
            chat_id=user_id,
            text=f'–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–æ {db.get_setting()[3]}% —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫!\n\n'
                 f'–£ –í–∞—Å {len(db.get_ref(user_id))} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)\n\n'
                 f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n'
                 f't.me/{bot_name.username}?start={user_id}'
        )

    elif call.data == 'rules':

        await bot.send_message(
            chat_id=user_id,
            text="""‚ö†Ô∏è –ü–†–ê–í–ò–õ–ê –ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–æ—Ç—É —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã/—Å—Å—ã–ª–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ñ–ª—É–¥–∏—Ç—å –≤ –∑–∞–ø–∏—Å—è—Ö.
‚ùóÔ∏è –û—Å–∫–æ—Ä–±–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
‚ùóÔ∏è–ú—ã - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ c –Ω–æ–º–µ—Ä–∞–º–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§.
‚ùóÔ∏è–ú—ã - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ —Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ö–æ–¥–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
‚ùóÔ∏è–ú—ã - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
‚ùóÔ∏è–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π - —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞ —Ç–∞–∫–∂–µ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.

üíä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ - –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∏ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
        )


async def user_history(call: types.CallbackQuery):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'next':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.history(user_id, int(temp[2]))
        )

    elif temp[1] == 'back':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.history(user_id, int(temp[2]))
        )

    elif temp[1] == 'menu':
        await User.menu.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text="""–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨üéà
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —á—Ç–æ –ø–∏—à—É—Ç –æ –≤–∞—Å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏!
–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –º–æ–∂–µ—Ç –æ –≤–∞—Å —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª–∏üë®‚Äçüíª 
–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ ¬´–ì–æ—Å–Ω–æ–º–µ—Ä—É¬ª, ¬´–ù–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –∏–ª–∏ ¬´VIN-–∫–æ–¥—É¬ª. 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            message_id=call.message.message_id,
            reply_markup=Keyboards.menu()
        )
    elif temp[1] == 'close':
        await bot.delete_message(call.from_user.id, call.message.message_id)

    else:
        await bot.answer_callback_query(
            callback_query_id=call.id,
            text='‚úÖ'
        )

        report = db.get_report_info(temp[1])
        bot_name = await bot.get_me()
        car_number = temp[2]

        if report[4]:
            await bot.send_photo(
                chat_id=user_id,
                photo=report[4],
                caption=report[3] + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}",
                reply_markup=Keyboards.close()
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=report[3] + f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: t.me/{bot_name.username}?start=c_{car_number}_{user_id}",
                reply_markup=Keyboards.close()
            )


def hand_add(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"], state="*")

    dp.register_message_handler(
        add_car_report_button, state=User.UserState.add_car_report_button
    )

    dp.register_message_handler(
        see_car_report_button, state=User.UserState.see_car_report_button
    )

    dp.register_message_handler(replenish_balance, state=User.UserState.replenish_balance)

    dp.register_message_handler(
        add_own_car_report,
        state=User.UserState.add_own_car_report,
        content_types=types.ContentType.ANY,
    )

    dp.register_callback_query_handler(callback_query_handler, state=User.menu.start)

    dp.register_callback_query_handler(user_history, lambda c: c.data and c.data.startswith('us'),
                                       state=User.history.start)
